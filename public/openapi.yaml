openapi: 3.1.0
info:
  title: Sleeper Draft MCP Actions API
  description: |
    # Sleeper Draft Fantasy Football API

    A comprehensive REST API providing access to fantasy football data from the Sleeper platform. This API serves as a bridge between the Sleeper Draft MCP (Model Context Protocol) server and HTTP clients, offering simplified endpoints for player statistics, league management, and fantasy football analytics.

    ## Core Features

    ### Player Data
    - **Trending Players**: Get players being added or dropped in the last 24 hours
    - **ADP Rankings**: Average Draft Position data for draft preparation
    - **Season Statistics**: Historical performance data and current season projections
    - **Player Search**: Find players by name or Sleeper ID with detailed stats

    ### League Management
    - **League Information**: Access league details, settings, and metadata
    - **User Rosters**: Complete roster data with player details and owner information
    - **Matchups**: Weekly head-to-head matchup data with scoring
    - **User Leagues**: Find all leagues for a specific user

    ## Data Sources
    This API aggregates data from multiple sources:
    - Sleeper API for real-time league and player data
    - Internal database for enhanced player statistics and projections
    - Fantasy football analytics for trending and ADP calculations

    ## Authentication
    No authentication required for public endpoints. All data is publicly available fantasy football information.

    ## Rate Limits
    Standard rate limiting applies to prevent abuse. Contact support if you need higher limits for commercial use.

    ## Response Format
    All endpoints return JSON with a consistent structure:
    - `success`: Boolean indicating operation success
    - `data`: The requested data (array or object)
    - `count`: Number of items returned (when applicable)
    - `message`: Human-readable success/error message
    - `metadata`: Additional context about the request and response
  version: 1.0.0
  contact:
    name: API Support
    url: https://www.sleeperdraft.com
    email: support@sleeperdraft.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://www.sleeperdraft.com/api
    description: Production server


paths:
  # Individual tool endpoints for better GPT Actions compatibility

  /mcp/tools/fetch-trending-players:
    post:
      security: []
      summary: Fetch trending players
      description: "Fetches trending players from the database based on adds or drops within the last 24 hours. Returns players ordered by trending value in descending order."
      operationId: fetchTrendingPlayers
      tags:
        - Player Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchTrendingPlayersRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchTrendingPlayersResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /mcp/tools/fetch-players:
    post:
      security: []
      summary: Fetch players
      description: "Fetch a paginated, enriched list of players with comprehensive filtering and league integration. Pass a league ID and you can see free agents and rostered player owner information."
      operationId: fetchPlayers
      tags:
        - Player Data
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchPlayersRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchPlayersResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /mcp/tools/fetch-player:
    post:
      security: []
      summary: Fetch player
      description: "Fetch comprehensive player data including stats, projections, volatility metrics, and performance analysis. Accepts either a player ID or search term to find a player."
      operationId: fetchPlayer
      tags:
        - Player Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchPlayerRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchPlayerResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /mcp/tools/fetch-matchups:
    post:
      security: []
      summary: Fetch matchups
      description: "Fetch enriched matchups for a league and week, including player data, projections, win probabilities, and confidence intervals. If user_id is provided, returns only matchups for that user; otherwise returns all matchups in the league."
      operationId: fetchMatchups
      tags:
        - League Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchMatchupsRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchMatchupsResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /mcp/tools/fetch-user-leagues:
    post:
      security: []
      summary: Fetch user leagues
      description: "Fetches all leagues for a user by username or user ID. Returns league IDs and names for the specified sport and season."
      operationId: fetchUserLeagues
      tags:
        - League Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchUserLeaguesRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchUserLeaguesResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /mcp/tools/evaluate-trade:
    post:
      security: []
      summary: Evaluate trade
      description: "Evaluate a fantasy football trade by analyzing player stats, projections, and providing aggregate comparison between receiving and sending sides."
      operationId: evaluateTrade
      tags:
        - Trade Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateTradeRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateTradeResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'




components:
  schemas:
    # Request Schemas
    FetchTrendingPlayersRequest:
      type: object
      properties:
        position:
          type: string
          enum: ["QB", "RB", "WR", "TE", "K", "DEF", "DST"]
          description: The position of the players to fetch
        type:
          type: string
          enum: ["add", "drop"]
          description: The type of trending data to fetch
        league_id:
          type: integer
          description: The league ID to fetch players from
        fa_only:
          type: boolean
          description: Whether to fetch only free agents (only works if league_id is provided)
      required:
        - type
      example:
        type: "add"
        position: "QB"
        league_id: 123456789
        fa_only: false

    FetchPlayersRequest:
      type: object
      properties:
        search:
          type: string
          description: The search query to filter players by
        position:
          type: string
          enum: ["QB", "RB", "WR", "TE", "K", "DEF", "DST"]
          description: The position of the players to fetch
        team:
          type: string
          description: The team of the players to fetch
        league_id:
          type: string
          description: The league ID to fetch players from
        fa_only:
          type: boolean
          description: Whether to fetch only free agents (only works if league_id is provided)
        per_page:
          type: integer
          minimum: 1
          maximum: 40
          description: The number of players to fetch per page
        page:
          type: integer
          minimum: 1
          description: The page number to fetch
      example:
        position: "QB"
        per_page: 10
        page: 1
        league_id: "987654321"
        fa_only: false

    FetchPlayerRequest:
      type: object
      properties:
        player_id:
          type: string
          description: The Sleeper player ID to fetch data for
        search:
          type: string
          description: Search term to find a player by name (first name, last name, or full name)
      oneOf:
        - required: [player_id]
        - required: [search]
      example:
        player_id: "4046"




    FetchMatchupsRequest:
      type: object
      properties:
        league_id:
          type: string
          description: Sleeper league ID to fetch matchups for
        week:
          anyOf:
            - type: integer
              minimum: 1
              maximum: 18
            - type: 'null'
          description: Week number to fetch matchups for (defaults to current week)
        user_id:
          anyOf:
            - type: string
            - type: 'null'
          description: "Optional Sleeper user ID to filter matchups to only show this user's matchups"
        sport:
          type: string
          description: "Sport type (default: nfl)"
          default: nfl
        compact:
          type: boolean
          description: "Return minimal player data to avoid truncation (default: true). Set to false for detailed player projections/stats."
          default: true
      required:
        - league_id
      example:
        league_id: "987654321"
        week: 5
        compact: true

    FetchUserLeaguesRequest:
      type: object
      properties:
        user_identifier:
          type: string
          description: Sleeper username or user ID to fetch leagues for
        sport:
          type: string
          description: "Sport type (default: nfl)"
          default: nfl
        season:
          type: string
          description: "Season year (default: current season)"
      required:
        - user_identifier
      example:
        user_identifier: "fantasyfan123"
        sport: "nfl"
        season: "2024"

    EvaluateTradeRequest:
      type: object
      properties:
        receiving:
          type: array
          description: List of players being received in the trade
          items:
            type: object
            properties:
              player_id:
                type: string
                description: Sleeper player ID
              search:
                type: string
                description: Search term to find a player by name
            oneOf:
              - required: [player_id]
              - required: [search]
          minItems: 1
          example: [{ player_id: "4046" }, { search: "Travis Kelce" }]
        sending:
          type: array
          description: List of players being sent in the trade
          items:
            type: object
            properties:
              player_id:
                type: string
                description: Sleeper player ID
              search:
                type: string
                description: Search term to find a player by name
            oneOf:
              - required: [player_id]
              - required: [search]
          minItems: 1
          example: [{ player_id: "1234" }]
      required:
        - receiving
        - sending
      example:
        receiving: [{ player_id: "4046" }]
        sending: [{ player_id: "1234" }]


    # Response Schemas
    FetchTrendingPlayersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            description: Player trending data
        count:
          type: integer
          example: 25
        message:
          type: string
          example: "Successfully fetched trending players"
        metadata:
          type: object
          description: Additional context about the request and response
      required:
        - success

    FetchPlayersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Paginated player data as returned by Laravel paginator
        count:
          type: integer
          example: 10
        message:
          type: string
          example: "Successfully fetched players"
        metadata:
          type: object
          description: Additional context including filters and pagination
      required:
        - success

    FetchPlayerResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Player data
        message:
          type: string
          example: "Successfully fetched player data"
        metadata:
          type: object
          description: Additional context about the request and response
      required:
        - success





    FetchMatchupsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            description: Matchup data
        count:
          type: integer
          example: 6
        message:
          type: string
          example: "Successfully fetched matchups"
        metadata:
          type: object
          description: Additional context about the request and response
      required:
        - success

    FetchUserLeaguesResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            description: League data
        count:
          type: integer
          example: 3
        message:
          type: string
          example: "Successfully fetched user leagues"
        metadata:
          type: object
          description: Additional context about the request and response
      required:
        - success

    EvaluateTradeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Trade evaluation data
        message:
          type: string
          example: "Trade evaluation completed successfully"
        metadata:
          type: object
          description: Additional context about the request and response
      required:
        - success



  responses:
    ValidationError:
      description: Validation error in request parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Tool execution failed"
              message:
                type: string
                example: "Validation failed: The user_id field is required"
              mcp_error:
                type: object
                properties:
                  code:
                    type: integer
                    example: -32602
                  message:
                    type: string
                    example: "Invalid params"

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"
              message:
                type: string
                example: "An unexpected error occurred while processing the request"

tags:
  - name: Player Data
    description: Player statistics, rankings, trending data, and ADP analysis
  - name: League Data
    description: League information, user rosters, matchups, and league management
  - name: Trade Analysis
    description: Fantasy football trade evaluation and analysis tools
